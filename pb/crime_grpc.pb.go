// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrimeServiceClient is the client API for CrimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrimeServiceClient interface {
	GetCrimes(ctx context.Context, in *GetCrimeRequest, opts ...grpc.CallOption) (*GetCrimeResponse, error)
}

type crimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrimeServiceClient(cc grpc.ClientConnInterface) CrimeServiceClient {
	return &crimeServiceClient{cc}
}

func (c *crimeServiceClient) GetCrimes(ctx context.Context, in *GetCrimeRequest, opts ...grpc.CallOption) (*GetCrimeResponse, error) {
	out := new(GetCrimeResponse)
	err := c.cc.Invoke(ctx, "/CrimeService/GetCrimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrimeServiceServer is the server API for CrimeService service.
// All implementations must embed UnimplementedCrimeServiceServer
// for forward compatibility
type CrimeServiceServer interface {
	GetCrimes(context.Context, *GetCrimeRequest) (*GetCrimeResponse, error)
}

// UnimplementedCrimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrimeServiceServer struct {
}

func (UnimplementedCrimeServiceServer) GetCrimes(context.Context, *GetCrimeRequest) (*GetCrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrimes not implemented")
}
func (UnimplementedCrimeServiceServer) mustEmbedUnimplementedCrimeServiceServer() {}

// UnsafeCrimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrimeServiceServer will
// result in compilation errors.
type UnsafeCrimeServiceServer interface {
	mustEmbedUnimplementedCrimeServiceServer()
}

func RegisterCrimeServiceServer(s grpc.ServiceRegistrar, srv CrimeServiceServer) {
	s.RegisterService(&CrimeService_ServiceDesc, srv)
}

func _CrimeService_GetCrimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimeServiceServer).GetCrimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CrimeService/GetCrimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimeServiceServer).GetCrimes(ctx, req.(*GetCrimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrimeService_ServiceDesc is the grpc.ServiceDesc for CrimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CrimeService",
	HandlerType: (*CrimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrimes",
			Handler:    _CrimeService_GetCrimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/crime.proto",
}
